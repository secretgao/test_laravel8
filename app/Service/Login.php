<?php
namespace App\Service;

use App\Utils\Singleton;
use App\Services\RedisService;  class SsoLogic {     use Singleton;      protected $cache;     protected $memcached;     protected static $sso_token_prefix = 'sso_login_prefix_';     protected static $online_user = 'online_user';      protected static $last_online_time = 'last_online_time_';     protected static $last_check_online_time = 'last_check_online_time_';     protected static $last_online_standard_ttl = 3 * 3600; // 最长空闲在线时间3小时     protected static $last_online_ttl = 5 * 3600; // 缓存用户最后在线时间时长     protected static $refresh_last_online_ttl = 10 * 60; // 更新在线时间间隔     protected static $check_online_ttl = 5 * 60; // 5分钟检查一次在线用户情况      public function __construct()     {         $this->cache     = new RedisService();         $this->memcached = new MemcachedService();     }      /**      * 检查在线情况.      *      * @param $userId      */     public function checkOnline($userId)     {         $cacheKey = self::$last_check_online_time;         $lastCheckOnlineTime = $this->cache->get($cacheKey);         if (empty($lastCheckOnlineTime) || time() - $lastCheckOnlineTime > self::$check_online_ttl) {             $allOnlineUser = $this->zAllOnlineUser();             foreach ($allOnlineUser as $eachUserId) {                 $this->checkUserOnline($eachUserId, $userId);             }             $this->cache->set($cacheKey, time(), self::$last_online_ttl);         }     }       /**      * 更新用户最后在线时间      *      * @param $userId      *      */     public function setSelfLastOnline($userId)     {         $currentTime = time();          $cacheKey = self::$last_online_time . $userId;         $this->cache->set($cacheKey, $currentTime, self::$last_online_ttl);         $this->cache->zAdd(self::$online_user, $currentTime, $userId);     }      /**      * 检查某个用户是否在指定时间内在线      *      * @param $userId      * @param $selfUserId      */     public function checkUserOnline($userId, $selfUserId)     {         $cacheKey = self::$last_online_time.$userId;         $lastOnlineTime = $this->cache->get($cacheKey);         if (empty($lastOnlineTime)) {             // 记录在线时间自然过期, 剔除在线用户.             $this->releaseSsoToken($userId);         } else {             $diffTimeStamp = time() - $lastOnlineTime;             $offlineBeyondStandardTime = false;             if ($diffTimeStamp > self::$last_online_standard_ttl) {                 $offlineBeyondStandardTime = true;             }             // 上次在线3小时前, 删除在线用户.             if ($offlineBeyondStandardTime) {                 $this->releaseSsoToken($userId);             }             // 当前用户自己没有超时, 并且上一次在线时间是10分钟前, 更新最新最后在线时间.             if ($userId == $selfUserId && !$offlineBeyondStandardTime && $diffTimeStamp > self::$refresh_last_online_ttl) {                 $this->cache->set($cacheKey, time(), self::$last_online_ttl);             }         }     }      /**      * 记录token.      *      * @param $userId      * @param $token      */     public function recordSsoToken($userId, $token)     {         $ttl = env('JWT_TTL', 60) * 60;         //$this->cache->set(self::$sso_token_prefix.$userId, md5($token), $ttl);         $this->memcached->set(self::$sso_token_prefix.$userId, md5($token), $ttl);         // 初始化用户最后在线时间         $this->cache->set(self::$last_online_time.$userId, time(), self::$last_online_ttl);         // 记录在线用户数量         $this->zAddOnlineUser($userId);     }      /**      * 查找用户当前token.      *      * @param $userId      * @return mixed      */     public function findSsoToken($userId)     {         //return $this->cache->get(self::$sso_token_prefix.$userId);         return $this->memcached->get(self::$sso_token_prefix.$userId);     }      /**      * 删除用户token.      *      * @param $userId      */     public function releaseSsoToken($userId)     {         //$this->cache->release(self::$sso_token_prefix.$userId);         $this->memcached->release(self::$sso_token_prefix.$userId);         // 删除在线用户         $this->zRemOnlineUser($userId);     }      /**      * 记录在线用户.      * @param $userId      */     public function zAddOnlineUser($userId)     {         $this->cache->zAdd(self::$online_user, time(), $userId);     }     /**      * 删除在线用户.      * @param $userId      */     public function zRemOnlineUser($userId)     {         $this->cache->zRem(self::$online_user, $userId);     }      /**      * 统计在线用户数量.      */     public function zCardOnlineUser()     {         $this->cache->zCard(self::$online_user);     }      /**      * 获取所有在线用户的集合.      */     public function zAllOnlineUser()     {         return $this->cache->zAll(self::$online_user);     } } 
